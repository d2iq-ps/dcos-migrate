import argparse
import contextlib
import logging as log
import os
import shutil
import sys

from collections import namedtuple

import backup
import translate

# KUBERNETES CLI
kubectl = os.getenv("KUBECTL", "kubectl")

# Edit/Update as needed
Mapping = namedtuple("Mapping", ["DCOS_VERSION", "KUDO_VERSION"])
versions = [Mapping("2.10.0-3.11.6", "3.11.5-0.1.2")]  # TODO support more versions

WARNING = """
WARNING: ALL THE PARAMETERS ARE GENERATED AS PER THE DCOS VERSION OF THE SERVICE, IT MIGHT NOT BE THE BEST FOR K8s.
SO BEFORE INSTALLING THE SERVICE PLEASE OPEN A TARGET FILE ({}) AND MODIFY VALUES AS PER THE AVAILABILITY ON THE K8s CLUSTER.
SPECIALLY VALUES OF THESE FIELDS SHOULD BE ADJUSTED AS PER THE CLUSTER:
NODE_COUNT
NODE_CPU_MC
NODE_CPU_LIMIT_MC
NODE_MEM_MIB
NODE_MEM_LIMIT_MIB
NODE_DISK_SIZE_GIB
NODE_TOPOLOGY
EXTERNAL_SEED_NODES
"""

separator = "--------------------------------------------------"


# Return the downloaded package version
def download(args) -> str:
    log.info('Downloading DC/OS package with marathon app id {} into target directory {}'.format(args.app_id, args.target_dir))
    pkg_ver = backup.download_dcos_package(args.app_id, args.target_dir, [versions[0][0]])
    # backup.download_task_data(cassandra_ver, args.app_id, args.target_dir)
    return pkg_ver


def print_instructions(namespace: str, fullname: str, target_file: str, ver: Mapping = versions[0]):  # TODO: support more versions
    KUDO_CMD = '''
{kubectl} kudo install \\
    --namespace {namespace} \\
    --instance {fullname} \\
    --parameter-file {target_file} \\
    --operator-version {version} \\
    cassandra
'''
    KUDO_STATUS_CMD = """
{kubectl} kudo plan status \\
    --namespace {namespace} \\
    --instance={fullname}"
"""

    print(separator)
    print("Run the following command to install Cassandra on K8s: {}".format(
        KUDO_CMD.format(kubectl=kubectl, namespace=namespace,
          fullname=fullname, target_file=target_file, version=ver.KUDO_VERSION)))
    print(separator)
    print(WARNING.format(target_file))
    print(separator)
    print("Run the following command to check the status: {}".format(
        KUDO_STATUS_CMD.format(kubectl=kubectl, namespace=namespace, fullname=fullname)))
    print(separator)
    print("Make sure plan shows COMPELTE, before proceeding further.")
    print(separator)


def install(args):
    log.info('Translating Mesos configurations to K8s configurations')
    is_ok = translate.translate_mesos_to_k8s(args.config_file, args.target_file)
    if is_ok:
        print_instructions(args.namespace, args.fullname, args.target_file)


def main():
    log.basicConfig(level=log.INFO, format='[%(asctime)s] %(levelname)5s {%(filename)s:%(lineno)d} - %(message)s')

    class ShutdownHandler(log.Handler):
        def emit(self, record):
            log.shutdown()
            sys.exit(1)

    log.getLogger().addHandler(ShutdownHandler(level=50))

    # Dummy parent parser to share common global level args
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument("-t", "--target-dir", type=str, default="./cassandra_home",
                               help='Folder to hold configuration of running DC/OS Cassandra service (defaults to ./cassandra_home)')

    parser = argparse.ArgumentParser()
    parser.add_argument('--version', action='version', version='0.0.1-dev')
    subparsers = parser.add_subparsers(help='sub-commands available')

    # Step 1 : Backup the DC/OS Cassandra tasks data
    backup_cmd = subparsers.add_parser("backup", help='Backup the DC/OS package data', parents=[parent_parser])
    backup_cmd.add_argument("--app-id", type=str, default="cassandra", help="Service Name (defaults to cassandra)")
    backup_cmd.set_defaults(func=download)

    # Step 2 : Migrate the configs from DC/OS Cassandra format to Kubernetes Cassandra format and print install instructions
    install_cmd = subparsers.add_parser("install",
                                        help='Translate the MesosCloud based configs to KubernetesCloud based configs and print install instructions.')
    install_cmd.add_argument("-c", "--config-file", type=str, default="./cassandra_home/cassandra_env.json", help="Path of the cassandra env file generated by backup command. (defaults to ./cassandra_home/cassandra_env.json)")
    install_cmd.add_argument("-t", "--target-file", type=str, default="./cassandra_home/params.yml", help="Path of the target params file (defaults to ./cassandra_home/params.yml)")
    install_cmd.add_argument("--namespace", type=str, default="default", help="Namespace of the cassandra pods (defaults to default)")
    install_cmd.add_argument("--fullname", type=str, default="cassandra-instance",
                             help="Name of the Cassandra Kudo installation (defaults to cassandra-instance)")
    install_cmd.set_defaults(func=install)

    args = parser.parse_args()
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    args.func(args)


if __name__ == '__main__':
    main()
