SHELL=/bin/bash -o pipefail -e
.PHONY=clean download upload dcos-sleep k8s-sleep init-deploy
include config.sh

copy: target/copied ## Deploy sleeper version of the app on both k8s and DC/OS, download the data from DC/OS, upload to k8s, then resume k8s

clean: ## Reset state and purge all downloaded data
	rm -rf target

target/copied: target/dcos-uploaded target/k8s-resumed

target/dcos-slept:
	mkdir -p target
	rm -f target/dcos-resumed
	../bin/dcos-deploy-and-wait dcos-sleeper-command-patch.json | tee $@.work
	mv $@.work $@

target/dcos-downloaded: target/dcos-slept
	mkdir -p target
	../bin/dcos-download-data | tee $@.work
	mv $@.work $@

target/dcos-resumed:
	mkdir -p target
	rm -f target/dcos-slept
	../bin/dcos-rollback-to-original | tee $@.work
	mv $@.work $@

target/k8s-slept:
	mkdir -p target
	rm -f k8s-resumed
	kubectl patch statefulsets/$(K8S_APP_ID) --patch "$$(cat k8s-sleeper-command-patch.yaml)" | tee $@.work
	kubectl rollout status --watch --timeout=600s statefulset/$(K8S_APP_ID) | tee -a $@.work
	mv $@.work $@

target/k8s-resumed:
	mkdir -p target
	rm -f target/k8s-slept
	kubectl patch statefulsets/$(K8S_APP_ID) --patch "$$(cat k8s-original-command-patch.yaml)" | tee $@.work
	kubectl rollout status --watch --timeout=600s statefulset/$(K8S_APP_ID)  | tee -a $@.work
	mv $@.work $@

target/k8s-uploaded: target/k8s-slept target/dcos-downloaded
	mkdir -p target
	../bin/k8s-upload-data | tee $@.work
	mv $@.work $@

target/init-deployed:
	mkdir -p target
	kubectl apply -f ../../$(K8S_APP_ID).Manifest.yaml | tee -a $@.work
	kubectl rollout status --watch --timeout=600s statefulset/$(K8S_APP_ID)  | tee -a $@.work
	mv $@.work $@

report: ## Show the copy status for the current StatefulSet
	@NAME=$$(basename $(PWD)); cd ..; bin/report $${NAME}

download: target/dcos-downloaded ## Download all data for the app; sleep the DC/OS app, first.
upload: target/k8s-uploaded ## Upload all downloaded data to K8s via kubectl cp; sleep the K8s StatefulSet, first.
dcos-sleep: target/dcos-slept ## Deploy the sleeper version of the app to DC/OS, wait for deployment to complete
k8s-sleep: target/k8s-slept ## Sleep the K8s StatefulSet
dcos-resume: target/dcos-resumed ## Resume the DC/OS app. This is performed by rolling back to the version obtained during the dcos-migrate backup.
k8s-resume: target/k8s-resumed ## Resume the K8s StatefulSet

init-deploy: target/init-deployed ## Deploy the initial K8s StatefulSet as generated by the `dcos-migrate migrate` phase.


# https://www.client9.com/self-documenting-makefiles/
help:
	@awk -F ':|##' '/^[^\t].+?:.*?##/ {\
	printf "\033[36m%-30s\033[0m %s\n", $$1, $$NF \
	        }' Makefile
.DEFAULT_GOAL=help
